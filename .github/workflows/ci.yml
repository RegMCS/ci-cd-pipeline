name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.13"
  POSTGRES_VERSION: "15"

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run isort import sorting check
        run: isort --check-only --diff .

      - name: Run Flake8 linter
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run MyPy type checker
        run: mypy app/ --ignore-missing-imports

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Set up test environment
        run: |
          export DB_HOST=localhost
          export DB_PORT=5432
          export DB_NAME=test_db
          export DB_USER=postgres
          export DB_PASSWORD=postgres
          export DB_MIN_CONN=1
          export DB_MAX_CONN=5

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_MIN_CONN: 1
          DB_MAX_CONN: 5

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v --junitxml=e2e-test-results.xml
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_MIN_CONN: 1
          DB_MAX_CONN: 5

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            e2e-test-results.xml

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: fastapi-boilerplate:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8000:8000 --name fastapi-boilerplate-test fastapi-boilerplate:latest
          sleep 10
          curl -f http://localhost:8000/ || exit 1
          docker stop fastapi-boilerplate-test

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build-docker]
    if: always()

    steps:
      - name: Notify Success
        if: needs.lint-and-format.result == 'success' && needs.test.result == 'success' && needs.build-docker.result == 'success'
        run: |
          echo "✅ All CI checks passed successfully!"

      - name: Notify Failure
        if: needs.lint-and-format.result == 'failure' || needs.test.result == 'failure' || needs.build-docker.result == 'failure'
        run: |
          echo "❌ CI checks failed. Please check the logs."
          exit 1
