name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.13"
  POSTGRES_VERSION: "15"

jobs:
  format-check:
    name: Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black formatter check
        run: black --check --diff .

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up test environment
        run: |
          export DB_HOST=localhost
          export DB_PORT=5432
          export DB_NAME=test_db
          export DB_USER=postgres
          export DB_PASSWORD=postgres
          export DB_MIN_CONN=1
          export DB_MAX_CONN=5

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_MIN_CONN: 1
          DB_MAX_CONN: 5

      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v --junitxml=e2e-test-results.xml
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_MIN_CONN: 1
          DB_MAX_CONN: 5

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.xml
            e2e-test-results.xml

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [format-check, test]
    if: always()

    steps:
      - name: Notify Success
        if: needs.format-check.result == 'success' && needs.test.result == 'success'
        run: |
          echo "✅ All CI checks passed! CD pipeline will deploy automatically."

      - name: Notify Failure
        if: needs.format-check.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "❌ CI checks failed. CD pipeline will not run."
          exit 1
